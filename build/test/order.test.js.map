{"version":3,"sources":["../../Server/test/order.test.js"],"names":["chai","use","chaiHttp","expect","describe","it","done","request","app","get","end","err","res","data","body","to","have","status","be","an","length","equal","newMenu","orderId","customerName","mealName","quantity","price","post","send","updateOrder","put"],"mappings":"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","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport app from '../index';\r\n\r\nchai.use(chaiHttp);\r\n// let should = chai.should();\r\nconst { expect } = chai;\r\n\r\ndescribe('GET /', () => {\r\n  it('should get all the menu', (done) => {\r\n    chai.request(app)\r\n      .get('/server/v1/orders')\r\n      .end((err, res) => {\r\n        const { data } = res.body;\r\n        expect(res).to.have.status(200);\r\n        expect(res).to.be.an('object');\r\n        expect(data).to.be.an('Array');\r\n        expect(data.length).to.equal(5);\r\n        done();\r\n      });\r\n  });\r\n});\r\n\r\ndescribe('POST /', () => {\r\n  it('should add to the existing menu', (done) => {\r\n    const newMenu = {\r\n      orderId: 15, customerName: 'Agboola Olaide', mealName: 'Chicken Pizza', quantity: '2', price: '3000', status: 'Completed',\r\n    };\r\n    chai.request(app)\r\n      .post('/server/v1/orders')\r\n      .send(newMenu)\r\n      .end((err, res) => {\r\n        const { data } = res.body;\r\n        expect(res).to.have.status(200);\r\n        expect(newMenu.orderId).to.equal(data.orderId);\r\n        expect(newMenu.customerName).to.equal(data.customerName);\r\n        expect(newMenu.mealName).to.equal(data.mealName);\r\n        expect(newMenu.price).to.equal(data.price);\r\n        expect(newMenu.quantity).to.equal(data.quantity);\r\n        expect(newMenu.status).to.equal(data.status);\r\n        done();\r\n      });\r\n  });\r\n});\r\n\r\ndescribe('PUT /:id', () => {\r\n  it('should update an existing order', (done) => {\r\n    const updateOrder = {\r\n      orderId: 15, customerName: 'Oyawale Deborah', mealName: 'Chicken Wings', quantity: '1', price: '500', status: 'Completed',\r\n    };\r\n    chai.request(app)\r\n      .put('/server/v1/orders/15')\r\n      .send(updateOrder)\r\n      .end((err, res) => {\r\n        const { data } = res.body;\r\n        expect(res).to.have.status(200);\r\n        expect(updateOrder.orderId).to.equal(data.orderId);\r\n        expect(updateOrder.customerName).to.equal(data.customerName);\r\n        expect(updateOrder.mealName).to.equal(data.mealName);\r\n        expect(updateOrder.price).to.equal(data.price);\r\n        expect(updateOrder.quantity).to.equal(data.quantity);\r\n        expect(updateOrder.status).to.equal(data.status);\r\n        done();\r\n      });\r\n  });\r\n});\r\n"],"file":"order.test.js"}